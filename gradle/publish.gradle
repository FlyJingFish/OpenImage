apply plugin: 'maven-publish'
apply plugin: 'signing'

def synchronized getVersionProperty(propName, defValue) {
    def file = file("$rootDir/version.properties")
    def ret = defValue
    if (file.exists() && file.canRead()) {
        FileInputStream input = new FileInputStream(file)
        Properties props = new Properties()
        props.load(input)
        ret = props.get(propName);
        input.close()
    }
    return ret
}


def getAppVersionName() {
    String versionName = getVersionProperty("PROJ_VERSION", "1.0.0")
    println("versionName======="+versionName)
    return versionName
}

task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.srcDirs
}

// 将文档打包成jar,生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

// 将源码打包 ，生成sources.jar
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
//
//    exclude "**/R.class"
//    exclude "**/BuildConfig.class"
}

//配置需要上传到maven仓库的文件
artifacts {
    archives androidSourcesJar //将源码打包进aar,这样使用方可以看到方法注释.
    archives androidJavadocsJar //将注释打包进aar
}
def appVersionName = getAppVersionName()
afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
//                from components.release
                groupId = PROJ_GROUP
                artifactId = PROJ_NAME
                version = appVersionName
                artifact("$buildDir/outputs/aar/" + PROJ_NAME + "-release.aar")
                artifact androidSourcesJar
                pom {
                    name = PROJ_BASENAME

                    description = PROJ_DESCRIPTION
                    url = PROJ_WEBSITEURL

                    scm {
                        connection = PROJ_VCSURL
                        developerConnection = PROJ_VCSURL
                        url = PROJ_WEBSITEURL
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = DEVELOPER_ID
                            name = DEVELOPER_NAME
                            email = DEVELOPER_EMAIL
                        }
                    }
                    // 解决依赖关系
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.all { configuration ->
                            def name = configuration.name
                            if (name != "implementation" && name != "compile" && name != "api") {
                                return
                            }
                            configuration.dependencies.each {
                                if (it.name == "unspecified") {
                                    // 忽略无法识别的
                                    return
                                }
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                                    if (it.group == "OpenImage"){
                                        dependencyNode.appendNode('groupId', PROJ_GROUP)
                                        dependencyNode.appendNode('version', appVersionName)
                                    }else {
                                        dependencyNode.appendNode('groupId', it.group)
                                        dependencyNode.appendNode('version', it.version)
                                    }
                                    dependencyNode.appendNode('artifactId', it.name)
                                    if (name == "api" || name == "compile") {
                                        dependencyNode.appendNode("scope", "compile")
                                    } else { // implementation
                                        dependencyNode.appendNode("scope", "runtime")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                allowInsecureProtocol = false
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                name = "nexus"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                name = "myProject"
            }
        }
    }
    signing {
        sign publishing.publications
    }
}


//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.srcDirs
//}
//artifacts {
//    archives sourceJar
//}
//signing {
//    sign configurations.archives
//}
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                name PROJ_BASENAME
//                artifactId PROJ_NAME
//                packaging 'aar'
//                description PROJ_DESCRIPTION
//                url PROJ_WEBSITEURL
//
//                scm {
//                    connection PROJ_VCSURL
//                    developerConnection PROJ_VCSURL
//                    url PROJ_WEBSITEURL
//                }
//
//                licenses {
//                    license {
//                        name 'The Apache License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id DEVELOPER_ID
//                        name DEVELOPER_NAME
//                        email DEVELOPER_EMAIL
//                    }
//                }
//            }
//        }
//    }
//}
// 生成文档注释
